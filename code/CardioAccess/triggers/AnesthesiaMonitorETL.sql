/*
PENDING IMPORT ID LEGEND
	0 = IMPORT SUCCESSFUL
	1 = SOURCE RECORD WAS UPDATED AND WAITING FOR DATA UPLOAD TO DESTINATION DB
	2 = NO MATCHING CASE EXISTS IN DESTINATION DB (CASES.CASELINKNUM)
	3 = ERROR UPDATING DESTINATION RECORD
	4 = ERROR INSERTING DESTINATION RECORD
*/

CREATE TRIGGER tr_CHOP_CCAS_ANESTHESIA_MONITOR ON CHOP_CCAS_ANESTHESIA_MONITOR
AFTER UPDATE, INSERT  as

 

DECLARE @i int 
DECLARE @numrows int 
DECLARE @EventID int, @DBVrsn varchar(5), @AnesthesiaFK int
DECLARE @AnestCaseList TABLE (CaseNumber int, CaseLinkNum int, DBVrsn varchar(5), RowID int)
DECLARE @ErrMsg nvarchar(4000), @ErrSeverity int


							
	SET NOCOUNT ON 
	
	INSERT INTO @AnestCaseList(CaseNumber, CaselinkNum, DBVrsn, RowID)
	SELECT CaseNumber, ANEST_SRC.CASELINKNUM, C.CDataVrsn, ROW_NUMBER() OVER (ORDER BY CaseNumber) 
	FROM [dbo].[CHOP_CCAS_ANESTHESIA_MONITOR] ANEST_SRC INNER JOIN dbo.Cases C ON ANEST_SRC.CaseLinkNum = C.CaseLinkNum 
	WHERE PendingImport IN (1,2)   --This is to test an individual record
	ORDER BY CaseNumber
		
	SELECT @numrows = @@RowCount, @i = 1
	WHILE (@i <= @numrows) 
		BEGIN
			SELECT @EventID = CaseNumber, @DBVrsn = DBVrsn, @AnesthesiaFK = CaseLinkNum FROM @AnestCaseList AC WHERE AC.RowID = @i

			IF EXISTS(SELECT APM.CaseNumber FROM AnesthesiaMonitor APM WHERE APM.CaseNumber = @EventID)  
				BEGIN
					BEGIN TRY
                       BEGIN 
						--BEGIN THE TRANSACTION
						BEGIN TRAN
							--UPDATE THE TARGET RECORD
							UPDATE ANEST_TRGT
							SET ANEST_TRGT.ARTLINE=ANEST_SRC.ARTLINE
								,ANEST_TRGT.ARTLINETYPERAD=ANEST_SRC.ARTLINETYPERAD
								,ANEST_TRGT.ARTLINETYPEBRACH=ANEST_SRC.ARTLINETYPEBRACH
								,ANEST_TRGT.ARTLINETYPEAX=ANEST_SRC.ARTLINETYPEAX
								,ANEST_TRGT.ARTLINETYPEFEM=ANEST_SRC.ARTLINETYPEFEM	
								,ANEST_TRGT.ARTLINETYPEULNAR=ANEST_SRC.ARTLINETYPEULNAR
								,ANEST_TRGT.ARTLINETYPEDORS=ANEST_SRC.ARTLINETYPEDORS
								,ANEST_TRGT.ARTLINETYPEPOST=ANEST_SRC.ARTLINETYPEPOST
								,ANEST_TRGT.ARTLINETYPECENT=ANEST_SRC.ARTLINETYPECENT
								,ANEST_TRGT.ARTLINEPREPROC=ANEST_SRC.ARTLINEPREPROC
								,ANEST_TRGT.CUTDOWN=ANEST_SRC.CUTDOWN
								,ANEST_TRGT.CUTDOWNRAD=ANEST_SRC.CUTDOWNRAD
								,ANEST_TRGT.CUTDOWNULN=ANEST_SRC.CUTDOWNULN
                                ,ANEST_TRGT.CUTDOWNFEM=ANEST_SRC.CUTDOWNFEM
								,ANEST_TRGT.CUTDOWNOTH=ANEST_SRC.CUTDOWNOTH
								,ANEST_TRGT.PERCENTPRESS=ANEST_SRC.PERCENTPRESS
								,ANEST_TRGT.PCPLOCRJUG=ANEST_SRC.PCPLOCRJUG
								,ANEST_TRGT.PCPLOCRSUB=ANEST_SRC.PCPLOCRSUB
								,ANEST_TRGT.PCPLOCRFEM=ANEST_SRC.PCPLOCRFEM
								,ANEST_TRGT.PCPLOCLJUG=ANEST_SRC.PCPLOCLJUG
								,ANEST_TRGT.PCPLOCLSUB=ANEST_SRC.PCPLOCLSUB
								,ANEST_TRGT.PCPLOCLFEM=ANEST_SRC.PCPLOCLFEM
								,ANEST_TRGT.PCPLOCOTH=ANEST_SRC.PCPLOCOTH
								,ANEST_TRGT.CVPPICCPREPROC=ANEST_SRC.CVPPICCPREPROC
								,ANEST_TRGT.CVPPLACED=ANEST_SRC.CVPPLACED
								,ANEST_TRGT.SCVO2=ANEST_SRC.SCVO2
								,ANEST_TRGT.NEUROMONITOR=ANEST_SRC.NEUROMONITOR
								,ANEST_TRGT.NEUROMONBIS=ANEST_SRC.NEUROMONBIS
								,ANEST_TRGT.NEUROMONTCD=ANEST_SRC.NEUROMONTCD
								,ANEST_TRGT.NEUROMONNIRS=ANEST_SRC.NEUROMONNIRS
								,ANEST_TRGT.NEUROMONOTH=ANEST_SRC.NEUROMONOTH
								,ANEST_TRGT.SGCATH=ANEST_SRC.SGCATH
								,ANEST_TRGT.SURGMONLINES=ANEST_SRC.SURGMONLINES
								,ANEST_TRGT.LOWINTRAOPTEMP=ANEST_SRC.LOWINTRAOPTEMP
								,ANEST_TRGT.INTRAOPTEMPSITE=ANEST_SRC.INTRAOPTEMPSITE
								,ANEST_TRGT.TEE=ANEST_SRC.TEE
 								,LastUpdate = GetDate()
 								,UpdateBy = 'CHOP_AUTOMATION'
							FROM AnesthesiaMonitor ANEST_TRGT INNER JOIN @AnestCaseList AC ON ANEST_TRGT.CaseNumber = AC.CaseNumber  
							INNER JOIN [dbo].[CHOP_CCAS_ANESTHESIA_MONITOR] ANEST_SRC ON AC.CaseLinkNum = ANEST_SRC.CASELINKNUM  
							WHERE AC.RowID = @i
							
							--UPDATE THE SOURCE RECORD RESETTING THE PENDING IMPORT FLAG TO 0
							UPDATE ANEST_SRC 
							SET ANEST_SRC.PendingImport = 0
							FROM [dbo].[CHOP_CCAS_ANESTHESIA_MONITOR] ANEST_SRC INNER JOIN @AnestCaseList AC ON ANEST_SRC.CASELINKNUM = AC.CaseLinkNum  
							WHERE AC.RowID = @i
						
						COMMIT TRAN
						--COMMIT THE PENDING TRANSACTION IF NO ERRORS
						
						-- VALIDATE THE RECORD FOR THE END USER
						EXEC Validation_Call_ByTableEventID 'AnesthesiaMonitor',@EventID,1,@DBVrsn;
					  END	
					END	TRY
					--IF ERROR IN TRANSACTION, PROVIDE ROLLBACK PROCEDURE
					BEGIN CATCH
						--PRINT 'BEGIN CATCH'
						IF @@TRANCOUNT > 0
							BEGIN
								--PRINT 'BEGIN ROLLBACK'
								
								ROLLBACK TRAN
								
								--PRINT 'BEGIN ERROR UPDATE'
								
								UPDATE ANEST_SRC 
								SET ANEST_SRC.PendingImport = 3
								FROM [dbo].[CHOP_CCAS_ANESTHESIA_MONITOR] ANEST_SRC INNER JOIN @AnestCaseList AC ON ANEST_SRC.CASELINKNUM = AC.CaseLinkNum  
								WHERE AC.RowID = @i
								
								--PRINT 'END ERROR UPDATE'
								
								SELECT @ErrMsg = ERROR_MESSAGE(), @ErrSeverity = ERROR_SEVERITY()
								
								RAISERROR(@ErrMsg, @ErrSeverity, 1)
							END
					END CATCH
					
				END
			ELSE IF EXISTS(SELECT C.CaseNumber FROM Cases C INNER JOIN @AnestCaseList AC ON C.CaseNumber = AC.CaseNumber WHERE AC.RowID = @i)
				
				BEGIN TRY
				  BEGIN
					BEGIN TRAN
						INSERT INTO dbo.AnesthesiaMonitor (HospitalID,Casenumber,ARTLINE,ARTLINETYPERAD,ARTLINETYPEBRACH,ARTLINETYPEAX,ARTLINETYPEFEM,ARTLINETYPEULNAR,ARTLINETYPEDORS,ARTLINETYPEPOST,ARTLINETYPECENT,
                        ARTLINEPREPROC,CUTDOWN,CUTDOWNRAD,CUTDOWNULN,CUTDOWNFEM,CUTDOWNOTH,PERCENTPRESS,PCPLOCRJUG,PCPLOCRSUB,PCPLOCRFEM,PCPLOCLJUG,PCPLOCLSUB,PCPLOCLFEM,PCPLOCOTH,CVPPICCPREPROC,CVPPLACED,
                        SCVO2,NEUROMONITOR,NEUROMONBIS,NEUROMONTCD,NEUROMONNIRS,NEUROMONOTH,SGCATH,SURGMONLINES,LOWINTRAOPTEMP,INTRAOPTEMPSITE,TEE,CreateDate,LastUpdate,UpdateBy)
						SELECT 4, AC.CaseNumber,ARTLINE,ARTLINETYPERAD,ARTLINETYPEBRACH,ARTLINETYPEAX,ARTLINETYPEFEM,ARTLINETYPEULNAR,ARTLINETYPEDORS,ARTLINETYPEPOST,ARTLINETYPECENT,
                        ARTLINEPREPROC,CUTDOWN,CUTDOWNRAD,CUTDOWNULN,CUTDOWNFEM,CUTDOWNOTH,PERCENTPRESS,PCPLOCRJUG,PCPLOCRSUB,PCPLOCRFEM,PCPLOCLJUG,PCPLOCLSUB,PCPLOCLFEM,PCPLOCOTH,CVPPICCPREPROC,CVPPLACED,
						SCVO2,NEUROMONITOR,NEUROMONBIS,NEUROMONTCD,NEUROMONNIRS,NEUROMONOTH,SGCATH,SURGMONLINES,LOWINTRAOPTEMP,INTRAOPTEMPSITE,TEE, GetDate(), GetDate(), 'CHOP_AUTOMATION' 
						FROM [dbo].[CHOP_CCAS_ANESTHESIA_MONITOR] ANEST_SRC INNER JOIN @AnestCaseList AC ON AC.CaseLinkNum = ANEST_SRC.CASELINKNUM 
						WHERE AC.RowID = @i

						UPDATE ANEST_SRC 
						SET ANEST_SRC.PendingImport = 0
						FROM [dbo].[CHOP_CCAS_ANESTHESIA_MONITOR] ANEST_SRC INNER JOIN @AnestCaseList AC ON ANEST_SRC.CASELINKNUM = AC.CaseLinkNum  
						WHERE AC.RowID = @i
					COMMIT TRAN
					--COMMIT THE PENDING TRANSACTION IF NO ERRORS
					
					-- VALIDATE THE RECORD FOR THE END USER
					EXEC Validation_Call_ByTableEventID 'AnesthesiaMonitor',@EventID,1,@DBVrsn;
                  END
				END	TRY
				BEGIN CATCH
					IF @@TRANCOUNT > 0
						BEGIN
							ROLLBACK TRAN
							
							UPDATE ANEST_SRC 
							SET ANEST_SRC.PendingImport = 4
							FROM [dbo].[CHOP_CCAS_ANESTHESIA_MONITOR] ANEST_SRC INNER JOIN @AnestCaseList AC ON ANEST_SRC.CASELINKNUM = AC.CaseLinkNum 
							WHERE AC.RowID = @i
							
							SELECT @ErrMsg = ERROR_MESSAGE(), @ErrSeverity = ERROR_SEVERITY()
							RAISERROR(@ErrMsg, @ErrSeverity, 1)

							
						END						
				END CATCH
			ELSE
				BEGIN
					UPDATE ANEST_SRC 
					SET ANEST_SRC.PendingImport = 2
					FROM [dbo].[CHOP_CCAS_ANESTHESIA_MONITOR] ANEST_SRC INNER JOIN @AnestCaseList AC ON ANEST_SRC.CASELINKNUM = AC.CaseLinkNum  
					WHERE AC.RowID = @i
					 
				END

			SET @i = @i + 1
		END
