/*
PENDING IMPORT ID LEGEND
	0 = IMPORT SUCCESSFUL
	1 = SOURCE RECORD WAS UPDATED AND WAITING FOR DATA UPLOAD TO DESTINATION DB
	2 = NO MATCHING CASE EXISTS IN DESTINATION DB (CASES.EMREventID)
	3 = ERROR UPDATING DESTINATION RECORD
	4 = ERROR INSERTING DESTINATION RECORD
*/

CREATE TRIGGER TR_CHOP_IMPACT_CATHTPVR ON CHOP_IMPACT_CATHTPVR
AFTER UPDATE, INSERT

AS

DECLARE @i int 
DECLARE @numrows int 
DECLARE @EventID int, @DBVrsn varchar(5), @EMREventID int
DECLARE @CathCaseList TABLE (CathID int, EMREventID int, DBVrsn varchar(5), RowID int)
DECLARE @ErrMsg nvarchar(4000), @ErrSeverity int


							
	SET NOCOUNT ON 
	
	INSERT INTO @CathCaseList(CathID, EMREventID, DBVrsn, RowID)
	SELECT CathID, CATH_SRC.SURG_ENC_ID, h.IMPACTDataVrsn , ROW_NUMBER() OVER (ORDER BY CathID) 
	FROM [dbo].CHOP_IMPACT_CATHTPVR CATH_SRC INNER JOIN dbo.CathData C ON CATH_SRC.SURG_ENC_ID = C.EMREventID 
	                                                 INNER JOIN dbo.Hospitalization H on C.HospID = H.HospitalizationID
   -- WHERE CATHID = 11989
    WHERE PendingImport IN (1,2)   --This is to test an individual record
	ORDER BY CathID
		
	SELECT @numrows = @@RowCount, @i = 1
	WHILE (@i <= @numrows) 
		BEGIN
			SELECT @EventID = CathID, @DBVrsn = DBVrsn, @EMREventID = EMREventID FROM @CathCaseList AC WHERE AC.RowID = @i

			IF EXISTS(SELECT ASD.CathID FROM CATHTPVR ASD WHERE ASD.CathID = @EventID)  
				BEGIN
					BEGIN TRY
					   BEGIN
						--BEGIN THE TRANSACTION
						BEGIN TRAN
							--UPDATE THE TARGET RECORD
							UPDATE CATH_TRGT
							SET CATH_TRGT.TPVRCLININD=CATH_SRC.TPVRCLININD,
								CATH_TRGT.TPVRHEMOIND=CATH_SRC.TPVRHEMOIND,
								CATH_TRGT.TPVRRVOTDYSFUNCTION=CATH_SRC.TPVRRVOTDYSFUNCTION,
								CATH_TRGT.TPVRECHO=CATH_SRC.TPVRECHO,
								CATH_TRGT.TPVRECHOMEANGRADIENT=CATH_SRC.TPVRECHOMEANGRADIENT,
								CATH_TRGT.TPVRECHOMAXGRADIENT=CATH_SRC.TPVRECHOMAXGRADIENT,
								CATH_TRGT.TPVRECHOPVREGURG=CATH_SRC.TPVRECHOPVREGURG,
								CATH_TRGT.TPVRECHOLVEF=CATH_SRC.TPVRECHOLVEF,
								CATH_TRGT.TPVRECHOTRS=CATH_SRC.TPVRECHOTRS,
								CATH_TRGT.TPVRMRI=CATH_SRC.TPVRMRI,
								CATH_TRGT.TPVRMRIRVEF=CATH_SRC.TPVRMRIRVEF,
								CATH_TRGT.TPVRMRILVEF=CATH_SRC.TPVRMRILVEF,
								CATH_TRGT.TPVRMRIRVEDVINDEX=CATH_SRC.TPVRMRIRVEDVINDEX,
								CATH_TRGT.TPVRMRIRVESVINDEX=CATH_SRC.TPVRMRIRVESVINDEX,
								CATH_TRGT.TPVRMRILVEDVINDEX=CATH_SRC.TPVRMRILVEDVINDEX,
								CATH_TRGT.TPVRMRILVESVINDEX=CATH_SRC.TPVRMRILVESVINDEX,
								CATH_TRGT.TPVRMRIPRFRACTION=CATH_SRC.TPVRMRIPRFRACTION,
								CATH_TRGT.TPVRRVOTTYPE=CATH_SRC.TPVRRVOTTYPE,
								CATH_TRGT.TPVRORIGINALCONDUIT=CATH_SRC.TPVRORIGINALCONDUIT,
								CATH_TRGT.TPVREXISTINGSTENT=CATH_SRC.TPVREXISTINGSTENT,
								CATH_TRGT.TPVRPRIORTPVR=CATH_SRC.TPVRPRIORTPVR,
								CATH_TRGT.TPVRCATHPEAKGRADIENT=CATH_SRC.TPVRCATHPEAKGRADIENT,
								CATH_TRGT.TPVRNARROWDIA=CATH_SRC.TPVRNARROWDIA,
								CATH_TRGT.TPVRAORTOPERF=CATH_SRC.TPVRAORTOPERF,
								CATH_TRGT.TPVRSELECTIVEANGIO=CATH_SRC.TPVRSELECTIVEANGIO,
								CATH_TRGT.TPVRCORCOMPRESSTEST=CATH_SRC.TPVRCORCOMPRESSTEST,
								CATH_TRGT.TPVRMAXBALLOONSIZE=CATH_SRC.TPVRMAXBALLOONSIZE,
								CATH_TRGT.TPVRCORCOMPRESSPRESENT=CATH_SRC.TPVRCORCOMPRESSPRESENT,
								CATH_TRGT.TPVRPREDILATIONPERF=CATH_SRC.TPVRPREDILATIONPERF,
								CATH_TRGT.TPVRFIRSTBALLSIZE=CATH_SRC.TPVRFIRSTBALLSIZE,
								CATH_TRGT.TPVRMAXBALLSIZE=CATH_SRC.TPVRMAXBALLSIZE,
								CATH_TRGT.TPVRHIGHINFLAPERF=CATH_SRC.TPVRHIGHINFLAPERF,
								CATH_TRGT.TPVRNEWPRESTENT=CATH_SRC.TPVRNEWPRESTENT,
								CATH_TRGT.TPVRNEWSTENTSNUM=CATH_SRC.TPVRNEWSTENTSNUM,
								CATH_TRGT.TPVRACCESSVESSEL=CATH_SRC.TPVRACCESSVESSEL,
								CATH_TRGT.TPVRDELIBALLSIZE=CATH_SRC.TPVRDELIBALLSIZE,
								CATH_TRGT.TPVRTPVDEPLOYED=CATH_SRC.TPVRTPVDEPLOYED,
								CATH_TRGT.TPVRTPVPOSTDILATION=CATH_SRC.TPVRTPVPOSTDILATION,
								CATH_TRGT.TPVRFINALBALLSIZE=CATH_SRC.TPVRFINALBALLSIZE,
								CATH_TRGT.TPVRFINALPRESSURE=CATH_SRC.TPVRFINALPRESSURE,
								CATH_TRGT.TPVRPEAKRVOTGRAD=CATH_SRC.TPVRPEAKRVOTGRAD,
								CATH_TRGT.TPVRPOSTPROCPVREGURG=CATH_SRC.TPVRPOSTPROCPVREGURG,
								CATH_TRGT.TPVRFINALDIAMETER=CATH_SRC.TPVRFINALDIAMETER,
								CATH_TRGT.TPVRNOTDEPLOYEDREASON=CATH_SRC.TPVRNOTDEPLOYEDREASON,
								CATH_TRGT.TPVRPOSTECHO=CATH_SRC.TPVRPOSTECHO,
								CATH_TRGT.TPVRPOSTECHOMEANGRAD=CATH_SRC.TPVRPOSTECHOMEANGRAD,
								CATH_TRGT.TPVRPOSTECHOMAXGRAD=CATH_SRC.TPVRPOSTECHOMAXGRAD,
								CATH_TRGT.TPVRPOSTECHOPULVALVEREGURG=CATH_SRC.TPVRPOSTECHOPULVALVEREGURG
			
							FROM CATHTPVR CATH_TRGT INNER JOIN @CathCaseList AC ON CATH_TRGT.CathID = AC.CathID  
							INNER JOIN [dbo].CHOP_IMPACT_CATHTPVR CATH_SRC ON AC.EMREventID = CATH_SRC.SURG_ENC_ID  
							WHERE AC.RowID = @i
							
							--UPDATE THE SOURCE RECORD RESETTING THE PENDING IMPORT FLAG TO 0
							UPDATE CATH_SRC 
							SET CATH_SRC.PendingImport = 0
							FROM [dbo].CHOP_IMPACT_CATHTPVR CATH_SRC INNER JOIN @CathCaseList AC ON CATH_SRC.SURG_ENC_ID = AC.EMREventID  
							WHERE AC.RowID = @i
						
						COMMIT TRAN
						--COMMIT THE PENDING TRANSACTION IF NO ERRORS
						 
						-- VALIDATE THE RECORD FOR THE END USER
						EXEC Validation_Call_ByTableEventID 'CATHTPVR',@EventID,4,@DBVrsn;
					  END	
					END	TRY
					--IF ERROR IN TRANSACTION, PROVIDE ROLLBACK PROCEDURE
					BEGIN CATCH
						--PRINT 'BEGIN CATCH'
						IF @@TRANCOUNT > 0
							BEGIN
								--PRINT 'BEGIN ROLLBACK'
								
								ROLLBACK TRAN
								
								--PRINT 'BEGIN ERROR UPDATE'
								
								UPDATE CATH_SRC 
								SET CATH_SRC.PendingImport = 3
								FROM [dbo].CHOP_IMPACT_CATHTPVR CATH_SRC INNER JOIN @CathCaseList AC ON CATH_SRC.SURG_ENC_ID = AC.EMREventID  
								WHERE AC.RowID = @i
								
								--PRINT 'END ERROR UPDATE'
								
								SELECT @ErrMsg = ERROR_MESSAGE(), @ErrSeverity = ERROR_SEVERITY()
								
								RAISERROR(@ErrMsg, @ErrSeverity, 1)
							END
					END CATCH
					
				END
			ELSE IF EXISTS(SELECT C.CathID FROM CathData C INNER JOIN @CathCaseList AC ON C.CathID = AC.CathID WHERE AC.RowID = @i)
				
				BEGIN TRY
				  BEGIN
					BEGIN TRAN
						INSERT INTO dbo.CATHTPVR (CathID,TPVRClinInd,TPVRHemoInd,TPVRRVOTDysfunction,TPVREcho,TPVREchoMeanGradient,TPVREchoMaxGradient,TPVREchoPVRegurg,TPVREchoLVEF,TPVREchoTRS,TPVRMRI,TPVRMRIRVEF,TPVRMRILVEF,TPVRMRIRVEDVIndex,TPVRMRIRVESVIndex,TPVRMRILVEDVIndex,TPVRMRILVESVIndex,TPVRMRIPRFraction,TPVRRVOTType,TPVROriginalConduit,TPVRExistingStent,TPVRPriorTPVR,TPVRCathPeakGradient,TPVRNarrowDia,TPVRAortoPerf,TPVRSelectiveAngio,TPVRCorCompressTest,TPVRMaxBalloonSize,TPVRCorCompressPresent,TPVRPredilationPerf,TPVRFirstBallSize,TPVRMaxBallSize,TPVRHighInflaPerf,TPVRNewPreStent,TPVRNewStentsNum,TPVRAccessVessel,TPVRDeliBallSize,TPVRTPVDeployed,TPVRTPVPostDilation,TPVRFinalBallSize,TPVRFinalPressure,TPVRPeakRVOTGrad,TPVRPostProcPVRegurg,TPVRFinalDiameter,TPVRNotDeployedReason,TPVRPostEcho,TPVRPostEchoMeanGrad,TPVRPostEchoMaxGrad,TPVRPostEchoPulValveRegurg) 
						SELECT AC.CathID, TPVRClinInd,TPVRHemoInd,TPVRRVOTDysfunction,TPVREcho,TPVREchoMeanGradient,TPVREchoMaxGradient,TPVREchoPVRegurg,TPVREchoLVEF,TPVREchoTRS,TPVRMRI,TPVRMRIRVEF,TPVRMRILVEF,TPVRMRIRVEDVIndex,TPVRMRIRVESVIndex,TPVRMRILVEDVIndex,TPVRMRILVESVIndex,TPVRMRIPRFraction,TPVRRVOTType,TPVROriginalConduit,TPVRExistingStent,TPVRPriorTPVR,TPVRCathPeakGradient,TPVRNarrowDia,TPVRAortoPerf,TPVRSelectiveAngio,TPVRCorCompressTest,TPVRMaxBalloonSize,TPVRCorCompressPresent,TPVRPredilationPerf,TPVRFirstBallSize,TPVRMaxBallSize,TPVRHighInflaPerf,TPVRNewPreStent,TPVRNewStentsNum,TPVRAccessVessel,TPVRDeliBallSize,TPVRTPVDeployed,TPVRTPVPostDilation,TPVRFinalBallSize,TPVRFinalPressure,TPVRPeakRVOTGrad,TPVRPostProcPVRegurg,TPVRFinalDiameter,TPVRNotDeployedReason,TPVRPostEcho,TPVRPostEchoMeanGrad,TPVRPostEchoMaxGrad,TPVRPostEchoPulValveRegurg
						FROM [dbo].CHOP_IMPACT_CATHTPVR CATH_SRC INNER JOIN @CathCaseList AC ON AC.EMREventID = CATH_SRC.SURG_ENC_ID 
						WHERE AC.RowID = @i

						UPDATE CATH_SRC 
						SET CATH_SRC.PendingImport = 0
						FROM [dbo].CHOP_IMPACT_CATHTPVR CATH_SRC INNER JOIN @CathCaseList AC ON CATH_SRC.SURG_ENC_ID = AC.EMREventID  
						WHERE AC.RowID = @i
					COMMIT TRAN
					--COMMIT THE PENDING TRANSACTION IF NO ERRORS
					
					-- VALIDATE THE RECORD FOR THE END USER
					EXEC Validation_Call_ByTableEventID 'CATHTPVR',@EventID,4,@DBVrsn;
					EXEC Validation_Call_ByTableEventID 'CATHTPVRDevice' ,@EventID,4,@DBVrsn;
                   END
				END	TRY
				BEGIN CATCH
					IF @@TRANCOUNT > 0
						BEGIN
							ROLLBACK TRAN
							
							UPDATE CATH_SRC 
							SET CATH_SRC.PendingImport = 4
							FROM [dbo].CHOP_IMPACT_CATHTPVR CATH_SRC INNER JOIN @CathCaseList AC ON CATH_SRC.SURG_ENC_ID = AC.EMREventID 
							WHERE AC.RowID = @i
							
							SELECT @ErrMsg = ERROR_MESSAGE(), @ErrSeverity = ERROR_SEVERITY()
							RAISERROR(@ErrMsg, @ErrSeverity, 1)

							
						END						
				END CATCH
			ELSE
				BEGIN
					UPDATE CATH_SRC 
					SET CATH_SRC.PendingImport = 2
					FROM [dbo].CHOP_IMPACT_CATHTPVR CATH_SRC INNER JOIN @CathCaseList AC ON CATH_SRC.SURG_ENC_ID = AC.EMREventID  
					WHERE AC.RowID = @i
					 
				END

			SET @i = @i + 1
		END
