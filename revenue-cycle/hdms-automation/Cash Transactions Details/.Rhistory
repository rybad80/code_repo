# This is where you load your packages (your packages may differ depending on what you used to process
# your data or make your charts). While it may be tempting to copy-and-paste this package chunk from
# your other dashboards, you should only include those libraries that you actually use in your
# dashboard - this will help minimize the run-time. Do not include any libPath manipulation when
# publishing.
library(flexdashboard)
library(DT)
library(highcharter)
# This is where you load your packages (your packages may differ depending on what you used to process
# your data or make your charts). While it may be tempting to copy-and-paste this package chunk from
# your other dashboards, you should only include those libraries that you actually use in your
# dashboard - this will help minimize the run-time. Do not include any libPath manipulation when
# publishing.
library(flexdashboard)
library(DT)
library(highcharter)
# This is where you load your packages (your packages may differ depending on what you used to process
# your data or make your charts). While it may be tempting to copy-and-paste this package chunk from
# your other dashboards, you should only include those libraries that you actually use in your
# dashboard - this will help minimize the run-time. Do not include any libPath manipulation when
# publishing.
library(flexdashboard)
library(DT)
#library(highcharter)
library(lubridate)
library(rocqi)
clarity_df
library(rocqi)
library(dplyr)
httr::set_config(httr::config(ssl_verifypeer = FALSE))
clarity_df <- run_sql("select * from pat_enc_req_resrc", con = "clarity")
clarity_df <- run_sql("select * from pat_enc_req_resrc", conn = "clarity")
packageVersion(rocqi)
packageVersion("rocqi"")
install.packages("rocqi")
usethis::edit_r_profile()
install.packages("usethis")
usethis::edit_r_profile()
install.packages("rocqi")
installed.packages("rocqi")
httr::set_config(httr::config(ssl_verifypeer = FALSE))
library(rocqi)
library(dplyr)
httr::set_config(httr::config(ssl_verifypeer = FALSE))
clarity_df <- run_sql("select * from pat_enc_req_resrc", conn = "clarity")
installed.packages("rocqi")
install.packages("rocqi")
install.packages("rocqi")
install.packages("rocqi")
library(rocqi)
library(dplyr)
httr::set_config(httr::config(ssl_verifypeer = FALSE))
clarity_df <- run_sql("select * from pat_enc_req_resrc", conn = "clarity")
install.packages("rocqi")
installed.packages("rocqi")
install.packages("rocqi")
library(rocqi)
library(dplyr)
httr::set_config(httr::config(ssl_verifypeer = FALSE))
clarity_df <- run_sql("select * from pat_enc_req_resrc", conn = "clarity")
library(rocqi)
library(dplyr)
httr::set_config(httr::config(ssl_verifypeer = FALSE))
clarity_df <- run_sql("select * from pat_enc_req_resrc", con = "clarity")
clarity_df <- run_sql("select * from pat_enc_req_resrc", con = "clarity")
clarity_df <- run_sql("select * from pat_enc_req_resrc", conn = "clarity")
clarity_df <- run_sql("select * from pat_enc_req_resrc", conn = clarity)
clarity_df <- run_sql("select * from pat_enc_req_resrc", conn = clarity)
clarity_df <- run_sql("select * from pat_enc_req_resrc", conn = clarity)
clarity_df <- run_sql("select * from pat_enc_req_resrc", conn = 'clarity')
# Excel file name
excel_file <- glue('{excel_filename}_{todaysdate}.xlsx')
install.packages("glue")
install.packages("glue")
library(downloadthis)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(dplyr)
library(rocqi)
library(DT)
library(shiny)
library(glue)
library(downloadthis)
library(lubridate)
library(stringr)
library(writexl)
#setup variables
save_path <- "//entdwpfs03.chop.edu/Dept/HomeCare/CHHC_Staff/Reimbursement/Management Tools/Tegria/Daily Transaction Logs"
#save_path <- "//cissqlqw1/G/HV_Export"
sql_filename <- "hdms_daily_log.sql"
excel_filename <- 'DS_CASH_TRANSACTIONDETAILS_DAILY'
todaysdate <- Sys.Date()
# Excel file name
excel_file <- glue('{excel_filename}_{todaysdate}.xlsx')
# Assemble file name
save_file_path <- paste(save_path,excel_file, sep ="\\")
# Connect to database and run SQL
result_df <-rocqi::run_sql_file(
sql_filename
)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(dplyr)
library(rocqi)
library(DT)
library(shiny)
library(glue)
library(downloadthis)
library(lubridate)
library(stringr)
library(writexl)
#setup variables
save_path <- "//entdwpfs03.chop.edu/Dept/HomeCare/CHHC_Staff/Reimbursement/Management Tools/Tegria/Daily Transaction Logs"
#save_path <- "//cissqlqw1/G/HV_Export"
sql_filename <- "GitHub/revenue-cycle/hdms-automation/hdms_daily_log.sql"
excel_filename <- 'DS_CASH_TRANSACTIONDETAILS_DAILY'
todaysdate <- Sys.Date()
# Excel file name
excel_file <- glue('{excel_filename}_{todaysdate}.xlsx')
# Assemble file name
save_file_path <- paste(save_path,excel_file, sep ="\\")
# Connect to database and run SQL
result_df <-rocqi::run_sql_file(
sql_filename
)
# Change date formats
final_df <- result_df %>%
mutate(across(contains("date"), ~ as.character.Date(.x, format = "%Y-%m-%d")))
# Save the dataframe to an Excel file
write_xlsx(final_df, save_file_path)
writeManifest()
install.packages("html")
writeManifest()
setwd("C:/Users/rybad/OneDrive - Children's Hospital of Philadelphia/Documents/GitHub/revenue-cycle/hdms-automation/Daily Log")
# Prevent code chunks from printing text
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(dplyr)
library(rocqi)
library(DT)
library(shiny)
library(glue)
library(downloadthis)
library(lubridate)
library(stringr)
library(writexl)
#setup variables
#save_path <- "//Chop.Edu/DepartmentShare/DS6/HomeCare/CHHC_Staff/Reimbursement/Management Tools/Tegria/Daily Transaction Logs"
#save_path <- "//cissqlqw1/G/HV_Export"
save_path <- "//chop.edu/departmentshare/DS6/Analytics_Reporting"
sql_filename <- "hdms_daily_log.sql"
excel_filename <- 'DS_CASH_TRANSACTIONDETAILS_DAILY'
excel_file <- glue('{excel_filename}_{todaysdate}.xlsx')
# Prevent code chunks from printing text
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(dplyr)
library(rocqi)
library(DT)
library(shiny)
library(glue)
library(downloadthis)
library(lubridate)
library(stringr)
library(writexl)
#setup variables
#save_path <- "//Chop.Edu/DepartmentShare/DS6/HomeCare/CHHC_Staff/Reimbursement/Management Tools/Tegria/Daily Transaction Logs"
#save_path <- "//cissqlqw1/G/HV_Export"
save_path <- "//chop.edu/departmentshare/DS6/Analytics_Reporting"
sql_filename <- "hdms_daily_log.sql"
excel_filename <- 'DS_CASH_TRANSACTIONDETAILS_DAILY'
excel_file <- glue('{excel_filename}_{todaysdate}.xlsx')
# Prevent code chunks from printing text
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(dplyr)
library(rocqi)
library(DT)
library(shiny)
library(glue)
library(downloadthis)
library(lubridate)
library(stringr)
library(writexl)
#setup variables
#save_path <- "//Chop.Edu/DepartmentShare/DS6/HomeCare/CHHC_Staff/Reimbursement/Management Tools/Tegria/Daily Transaction Logs"
#save_path <- "//cissqlqw1/G/HV_Export"
save_path <- "//chop.edu/departmentshare/DS6/Analytics_Reporting"
sql_filename <- "hdms_daily_log.sql"
excel_filename <- 'DS_CASH_TRANSACTIONDETAILS_DAILY'
excel_file <- glue('{excel_filename}_{todaysdate}.xlsx')
# Prevent code chunks from printing text
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(dplyr)
library(rocqi)
library(DT)
library(shiny)
library(glue)
library(downloadthis)
library(lubridate)
library(stringr)
library(writexl)
#setup variables
#save_path <- "//Chop.Edu/DepartmentShare/DS6/HomeCare/CHHC_Staff/Reimbursement/Management Tools/Tegria/Daily Transaction Logs"
#save_path <- "//cissqlqw1/G/HV_Export"
save_path <- "//chop.edu/departmentshare/DS6/Analytics_Reporting"
sql_filename <- "hdms_daily_log.sql"
excel_filename <- 'DS_CASH_TRANSACTIONDETAILS_DAILY'
todaysdate <- format(Sys.Date(), "%Y%m%d")
excel_file <- glue('{excel_filename}_{todaysdate}.xlsx')
# Assemble file name
save_file_path <- paste(save_path,excel_file, sep ="\\")
# Connect to database and run SQL
result_df <-rocqi::run_sql_file(
sql_filename
)
# Change date formats
final_df <- result_df %>%
mutate(across(contains("date"), ~ as.character.Date(.x, format = "%Y-%m-%d")))
# Save the dataframe to an Excel file
write_xlsx(final_df, save_file_path)
# Prevent code chunks from printing text
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(dplyr)
library(rocqi)
library(DT)
library(shiny)
library(glue)
library(downloadthis)
library(lubridate)
library(stringr)
library(writexl)
#setup variables
save_path <- "//Chop.Edu/DepartmentShare/DS6/HomeCare/CHHC_Staff/Reimbursement/Management Tools/Tegria/Daily Transaction Logs"
#save_path <- "//cissqlqw1/G/HV_Export"
#save_path <- "//chop.edu/departmentshare/DS6/Analytics_Reporting"
sql_filename <- "hdms_daily_log.sql"
excel_filename <- 'DS_CASH_TRANSACTIONDETAILS_DAILY'
todaysdate <- format(Sys.Date(), "%Y%m%d")
excel_file <- glue('{excel_filename}_{todaysdate}.xlsx')
# Assemble file name
save_file_path <- paste(save_path,excel_file, sep ="\\")
# Connect to database and run SQL
result_df <-rocqi::run_sql_file(
sql_filename
)
# Change date formats
final_df <- result_df %>%
mutate(across(contains("date"), ~ as.character.Date(.x, format = "%Y-%m-%d")))
# Save the dataframe to an Excel file
write_xlsx(final_df, save_file_path)
rsconnect::writeManifest()
setwd("~/GitHub/revenue-cycle/hdms-automation/Aged Date of Service")
rsconnect::writeManifest()
setwd("~/GitHub/revenue-cycle/hdms-automation/AR Transactions Details")
setwd("~/GitHub/revenue-cycle/hdms-automation/AR Transactions Details")
rsconnect::writeManifest()
setwd("C:/Users/rybad/OneDrive - Children's Hospital of Philadelphia/Documents/GitHub/revenue-cycle/hdms-automation/Cash Productivity")
rsconnect::writeManifest()
setwd("C:/Users/rybad/OneDrive - Children's Hospital of Philadelphia/Documents/GitHub/revenue-cycle/hdms-automation/Patient Responsibility")
rsconnect::writeManifest()
setwd("C:/Users/rybad/OneDrive - Children's Hospital of Philadelphia/Documents/GitHub/revenue-cycle/hdms-automation/Claims Productivity")
rsconnect::writeManifest()
setwd("C:/Users/rybad/OneDrive - Children's Hospital of Philadelphia/Documents/GitHub/revenue-cycle/hdms-automation/Claim Rejection History")
rsconnect::writeManifest()
setwd("C:/Users/rybad/OneDrive - Children's Hospital of Philadelphia/Documents/GitHub/revenue-cycle/hdms-automation/Claim Details")
rsconnect::writeManifest()
setwd("C:/Users/rybad/OneDrive - Children's Hospital of Philadelphia/Documents/GitHub/revenue-cycle/hdms-automation/Cash Transactions Details")
rsconnect::writeManifest()
